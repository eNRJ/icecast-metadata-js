{"version":3,"sources":["Player/Player.module.css","StationSelector/StationSelector.module.css","About/About.module.css","App.module.css","Player/Player.jsx","StationSelector/StationSelector.jsx","About/About.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ICECAST_METADATA_JS_DEMO","CodecInfo","React","memo","codecInfo","title","Object","entries","reduce","acc","k","v","className","styles","codecItem","bitrate","sampleRate","Player","station","playing","toggle","metadata","StreamTitle","TITLE","document","player","disabled","button","onClick","playPause","viewBox","fill","d","playerText","ARTIST","VENDOR_STRING","stationInfoContainer","link","visitStation","href","target","rel","name","CodecButton","selectedStation","changeStation","codecButtonNotSelectedStyle","endpoint","type","id","codec","stationRadio","onChange","codecLabel","codecSelected","htmlFor","metadataTypes","length","join","CodecButtonGroup","codecButtonsPerGroup","codecButtonGroups","i","endpoints","push","codecs","slice","map","idx","Station","stationLabelStyle","selected","codecNotSelected","notSelected","codecNotSelectedNotPlaying","stationLabel","stationName","stationDescription","description","StationSelector","props","stations","About","about","mainLink","headerLink","style","fontWeight","process","App","useState","setStation","setPlaying","Audio","audioElement","setMetadata","setCodecInfo","icecast","setIcecast","analyzer","useRef","audioMotion","setAudioMotion","useCallback","a","stop","detachAudioElement","IcecastMetadataPlayer","onMetadata","meta","console","log","onCodecUpdate","onPlay","onStop","onLoad","onError","error","message","onRetry","onStreamStart","icyDetectionTimeout","icyCharacterEncoding","enableLogging","play","useEffect","window","AudioContext","AudioMotionAnalyzer","current","source","showScaleX","fftSize","mode","gradient","showBgColor","barSpace","lumiBars","useLayoutEffect","resizeObserver","ResizeObserver","setCanvasSize","innerWidth","innerHeight","observe","disconnect","spectrum","ref","header","footer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a75ce7a0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"visitStation\":\"Player_visitStation__2xKeH\",\"playerText\":\"Player_playerText__Cw7Rh\",\"metadata\":\"Player_metadata__3j7ae\",\"playPause\":\"Player_playPause__3bmnX\",\"player\":\"Player_player__1vYfQ\",\"button\":\"Player_button__297uW\",\"stationInfoContainer\":\"Player_stationInfoContainer__1ZWEm\",\"link\":\"Player_link__2k87w\",\"codecInfo\":\"Player_codecInfo__37Tgu\",\"codecItem\":\"Player_codecItem__3tdl5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"station\":\"StationSelector_station__3a44c\",\"stationLabel\":\"StationSelector_stationLabel__1DbUR\",\"selected\":\"StationSelector_selected__8hQiH\",\"notSelected\":\"StationSelector_notSelected__2DXOX\",\"stationName\":\"StationSelector_stationName__1hB_K\",\"stationDescription\":\"StationSelector_stationDescription__36TBn\",\"stationRadio\":\"StationSelector_stationRadio__1FTGQ\",\"codecs\":\"StationSelector_codecs__2KEIT\",\"codecLabel\":\"StationSelector_codecLabel__7nt2i\",\"codecSelected\":\"StationSelector_codecSelected__mRP3I\",\"codecNotSelected\":\"StationSelector_codecNotSelected__2kM3a\",\"codecNotSelectedNotPlaying\":\"StationSelector_codecNotSelectedNotPlaying__2XWvH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"about\":\"About_about__2v-0B\",\"headerLink\":\"About_headerLink__3aZVt\",\"mainLink\":\"About_mainLink__1aSaU\",\"subLink\":\"About_subLink__n5KCY\",\"description\":\"About_description__3WN3o\",\"disclaimer\":\"About_disclaimer__2gOk6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__3ZZ1n\",\"footer\":\"App_footer__29Fsv\",\"spectrum\":\"App_spectrum__MkN9s\"};","import React from \"react\";\nimport styles from \"./Player.module.css\";\n\nconst VISIT_STATION = \"Visit this station at \";\nconst ICECAST_METADATA_JS_DEMO = \"Icecast Metadata JS Demo\";\n\nconst CodecInfo = React.memo(({ codecInfo }) => {\n  if (codecInfo) {\n    const title = Object.entries(codecInfo).reduce(\n      (acc, [k, v]) => acc + `${k}: ${v}\\x0A`,\n      \"\"\n    );\n\n    return (\n      <div title={title} className={styles.codecInfo}>\n        <div className={styles.codecItem}>{`${codecInfo.bitrate} kb/s`}</div>\n        <div className={styles.codecItem}>{`${codecInfo.sampleRate} Hz`}</div>\n      </div>\n    );\n  }\n\n  return null;\n});\n\nconst Player = ({ station, playing, toggle, metadata, codecInfo }) => {\n  // update metadata in title\n  const title = metadata.StreamTitle || metadata.TITLE;\n  document.title = title\n    ? `${title} | ${ICECAST_METADATA_JS_DEMO}`\n    : ICECAST_METADATA_JS_DEMO;\n\n  return (\n    <div className={styles.player}>\n      <button disabled={!station} className={styles.button} onClick={toggle}>\n        {playing ? (\n          <svg className={styles.playPause} viewBox=\"0 0 450 525\">\n            <path\n              fill=\"#999\"\n              d=\"M144 479H48c-26.5 0-48-21.5-48-48V79c0-26.5 21.5-48 48-48h96c26.5 0 48 21.5 48 48v352c0 26.5-21.5 48-48 48zm304-48V79c0-26.5-21.5-48-48-48h-96c-26.5 0-48 21.5-48 48v352c0 26.5 21.5 48 48 48h96c26.5 0 48-21.5 48-48z\"\n            />\n          </svg>\n        ) : (\n          <svg className={styles.playPause} viewBox=\"0 0 450 525\">\n            <path\n              fill=\"#999\"\n              d=\"M424.4 214.7L72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z\"\n            />\n          </svg>\n        )}\n      </button>\n      <div className={styles.playerText}>\n        <div className={styles.metadata}>\n          {typeof metadata === \"object\"\n            ? metadata.StreamTitle ||\n              (metadata.ARTIST\n                ? `${metadata.ARTIST} - ${metadata.TITLE}`\n                : metadata.TITLE) ||\n              metadata.VENDOR_STRING\n            : metadata}\n        </div>\n        <div className={styles.stationInfoContainer}>\n          {station?.link && (\n            <div className={styles.visitStation}>\n              {VISIT_STATION}\n              <a\n                className={styles.link}\n                href={station.link}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {station.name}\n              </a>\n            </div>\n          )}\n          <CodecInfo codecInfo={codecInfo} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(Player);\n","import React from \"react\";\nimport styles from \"./StationSelector.module.css\";\n\nconst CodecButton = ({\n  station,\n  selectedStation,\n  changeStation,\n  codecButtonNotSelectedStyle,\n  endpoint,\n}) => (\n  <div>\n    <input\n      type=\"radio\"\n      name=\"stations\"\n      id={station.name + endpoint.codec}\n      className={styles.stationRadio}\n      onChange={() => changeStation({ ...station, ...endpoint })}\n    />\n    <label\n      className={`${styles.codecLabel} ${\n        selectedStation?.endpoint === endpoint.endpoint\n          ? styles.codecSelected\n          : codecButtonNotSelectedStyle\n      }`}\n      htmlFor={station.name + endpoint.codec}\n    >\n      {endpoint.codec}\n      {endpoint.metadataTypes.length > 0 &&\n        ` | ${endpoint.metadataTypes.join(\", \")}`}\n    </label>\n  </div>\n);\n\nconst CodecButtonGroup = ({\n  station,\n  selectedStation,\n  changeStation,\n  codecButtonNotSelectedStyle,\n  codecButtonsPerGroup,\n}) => {\n  const codecButtonGroups = [];\n\n  for (let i = 0; i < station.endpoints.length; i += codecButtonsPerGroup) {\n    codecButtonGroups.push(\n      <div key={i / codecButtonsPerGroup} className={styles.codecs}>\n        {station.endpoints\n          .slice(i, i + codecButtonsPerGroup)\n          .map((endpoint, idx) => (\n            <CodecButton\n              key={idx}\n              station={station}\n              endpoint={endpoint}\n              codecButtonNotSelectedStyle={codecButtonNotSelectedStyle}\n              selectedStation={selectedStation}\n              changeStation={changeStation}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  return codecButtonGroups;\n};\n\nconst Station = ({ station, selectedStation, changeStation }) => {\n  let stationLabelStyle, codecButtonNotSelectedStyle;\n\n  if (selectedStation?.name === station.name) {\n    stationLabelStyle = styles.selected;\n    codecButtonNotSelectedStyle = styles.codecNotSelected;\n  } else {\n    stationLabelStyle = styles.notSelected;\n    codecButtonNotSelectedStyle = styles.codecNotSelectedNotPlaying;\n  }\n\n  return (\n    <label\n      className={`${styles.stationLabel} ${stationLabelStyle}`}\n      htmlFor={station.name + station.endpoints[0].codec}\n    >\n      <div className={styles.stationName}>{station.name}</div>\n      <div className={styles.stationDescription}>{station.description}</div>\n      <CodecButtonGroup\n        station={station}\n        selectedStation={selectedStation}\n        changeStation={changeStation}\n        codecButtonNotSelectedStyle={codecButtonNotSelectedStyle}\n        codecButtonsPerGroup={4}\n      />\n    </label>\n  );\n};\n\nconst StationSelector = (props) => {\n  return props.stations.map((station, idx) => (\n    <Station\n      key={idx}\n      station={station}\n      selectedStation={props.selectedStation}\n      changeStation={props.changeStation}\n    />\n  ));\n};\n\nexport default React.memo(StationSelector);\n","import React from \"react\";\nimport styles from \"./About.module.css\";\n\nconst About = () => (\n  <div className={styles.about}>\n    <a\n      className={styles.mainLink}\n      href=\"https://github.com/eshaz/icecast-metadata-js\"\n    >\n      <div>icecast-metadata-js</div>\n    </a>\n    <div className={styles.description}>\n      Javascript library that reads, parses, and queues real-time metadata from\n      an Icecast stream.\n    </div>\n    <div className={styles.headerLink}>\n      <a className={styles.headerLink} style={{ fontWeight: \"bold\" }} href=\"/\">\n        React Demo\n      </a>\n      &nbsp;&nbsp;|&nbsp;&nbsp;\n      <a\n        className={styles.headerLink}\n        href={`${process.env.PUBLIC_URL}/demo.html`}\n      >\n        HTML Demo\n      </a>\n      &nbsp;&nbsp;|&nbsp;&nbsp;\n      <a\n        className={styles.headerLink}\n        href={`${process.env.PUBLIC_URL}/bare-minimum-demo.html`}\n      >\n        <i>\"Bare Minimum\"</i> HTML Demo\n      </a>\n    </div>\n  </div>\n);\n\nexport default React.memo(About);\n","import React, {\n  useState,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\";\nimport AudioMotionAnalyzer from \"audiomotion-analyzer\";\nimport Player from \"./Player/Player\";\nimport StationSelector from \"./StationSelector/StationSelector\";\nimport stations from \"./stations.json\";\nimport styles from \"./App.module.css\";\nimport About from \"./About/About\";\n\nimport IcecastMetadataPlayer from \"icecast-metadata-player\";\n\nconst SELECT_STATION = \"Select a station\";\nconst SELECT_OR_PLAY = \"Select a station or press play\";\nconst LOADING = \"Loading...\";\nconst RECONNECTING = \"Lost Connection. Reconnecting...\";\nconst CONNECTED = \"Waiting for metadata...\";\n\nconst App = () => {\n  const [station, setStation] = useState();\n  const [playing, setPlaying] = useState(false);\n  const [audioElement] = useState(new Audio());\n\n  const [metadata, setMetadata] = useState(SELECT_STATION);\n  const [codecInfo, setCodecInfo] = useState();\n  const [icecast, setIcecast] = useState();\n\n  const analyzer = useRef();\n  const [audioMotion, setAudioMotion] = useState();\n\n  const changeStation = useCallback(\n    async (station) => {\n      if (icecast) {\n        await icecast.stop();\n        icecast.detachAudioElement();\n      }\n\n      const player = new IcecastMetadataPlayer(station.endpoint, {\n        onMetadata: (meta) => {\n          console.log(meta);\n          setMetadata(meta);\n        },\n        onCodecUpdate: setCodecInfo,\n        onPlay: () => {\n          setPlaying(true);\n        },\n        onStop: () => {\n          setPlaying(false);\n          setMetadata(SELECT_OR_PLAY);\n          setCodecInfo();\n        },\n        onLoad: () => {\n          setPlaying(true);\n          setMetadata(LOADING);\n          setCodecInfo();\n        },\n        onError: (error) => {\n          setMetadata(error?.message || error);\n          setCodecInfo();\n        },\n        onRetry: () => {\n          setMetadata(RECONNECTING);\n        },\n        onStreamStart: () => {\n          setMetadata(station.metadataTypes.length ? CONNECTED : \"\");\n        },\n        icyDetectionTimeout: 5000,\n        icyCharacterEncoding: station.icyCharacterEncoding,\n        enableLogging: true,\n        metadataTypes: station.metadataTypes,\n        audioElement,\n      });\n\n      player.play();\n\n      setIcecast(player);\n      setStation(station);\n    },\n    [icecast, audioElement]\n  );\n\n  const toggle = useCallback(() => {\n    playing ? icecast.stop() : icecast.play();\n  }, [icecast, playing]);\n\n  useEffect(() => {\n    if (window.AudioContext) {\n      setAudioMotion(\n        new AudioMotionAnalyzer(analyzer.current, {\n          source: audioElement,\n          showScaleX: false,\n          fftSize: 32768,\n          mode: 1,\n          gradient: \"prism\",\n          showBgColor: false,\n          barSpace: 0,\n          lumiBars: true,\n        })\n      );\n    }\n  }, [audioElement]);\n\n  // adjust canvas size for audio spectrum\n  useLayoutEffect(() => {\n    const resizeObserver = new ResizeObserver(() => {\n      audioMotion &&\n        audioMotion.setCanvasSize(window.innerWidth, window.innerHeight + 100);\n    });\n    resizeObserver.observe(analyzer.current);\n    return () => resizeObserver.disconnect();\n  }, [audioMotion]);\n\n  return (\n    <>\n      <div className={styles.spectrum} ref={analyzer}></div>\n      <header className={styles.header}>\n        <About />\n      </header>\n      <main>\n        <StationSelector\n          stations={stations}\n          changeStation={changeStation}\n          selectedStation={station}\n        />\n      </main>\n      <footer className={styles.footer}>\n        <Player\n          station={station}\n          toggle={toggle}\n          playing={playing}\n          metadata={metadata}\n          codecInfo={codecInfo}\n        ></Player>\n      </footer>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}